<12/28> 라이브러리 살펴보기
spring-boot-starter-? : 필요한 라이브러리를 자동으로 의존주입해준다.
핵심 라이브러리
- 스프링mvc
- 스프링orm
- jpa,하이버네이트
- 스프링 데이터jpa

<12/29> View 환경 설정 & H2 데이터베이스 설치
1. View 환경 설정 _ Thymeleaf
    Thymeleaf란? Template Engine의 일종.
    장 : Spring과의 조합이 좋다. Spring에서 권장하는 template 엔진.

    *html코드 조금만 수정하고 자동으로 complie해주는 라이브러리 Dependency 추가*
     implementation 'org.springframework.boot:spring-boot-devtools'
     -> html 수정 후 'build -> Recomplie ~.html' 선택.

    *오류
     Spring boot 버전 문제 _ Controller에서 view로 model.addAttribute("data") 해주었는데 view에서 해당 data 를 읽어오지 못한다.
     해결 : Plugin 버전 수정.
            id 'java'
          	id 'org.springframework.boot' version '2.7.7' -> 2.4.1
          	id 'io.spring.dependency-management' version '1.0.15.RELEASE' -> 1.0.10.RELEASE

2. H2 데이터베이스 설치
    ./h2.bat 실행 -> 192.168.219.107:8082/login.jsp?jsessionid=(key값) url 이동 *key값은 유지해준다.* -> http://localhost:8082/login.jsp?jsessionid=3771b07e2d9de744661d20d096d02802 로 이동

     1) jdbc url (jdbc:h2:~/jpashop) 최초 한번
     2) ~/jpashop.mv.db 파일이 생성되었는지 확인
     3) jdbc:h2:tcp://localhost/~/jpashop 네트웍 모드로 접근(앞으로)
     => 세션을 위해 최초 한번이 필요했다.
     => 항상 ./h2.bat 실행 후 사용

    *오류
     설치 후 ./h2.sh 실행 시 오류 발생
     해결 : ./h2.bat 실행

3. JPA와 DB설정, 동작확인
    - 오류발생 : Failed to load ApplicationContext
    - 해결 : application.yml -> spring.datasource.url : jdbc:jpa:tcp://localhost/~/jpashop; (MVCC=TRUE)->제외.
       MVCC=TRUE 이게 뭘까?

    * Transactional : Test에 있을 경우, test가 끝난 이후 rollback 진행. -> insert 된 데이터가 없다.
    * 같은 영속성컨텍스트 안에서 저장,조회 되면 같은 entity로 조회
        -> Test에서 find함수로 member를 조회하지만, 로그를 확인했을때 insert query문만 나오고 select query문은 나오지 않는다.
        -> 영속성 컨텍스트에서 관리되어지고 있는(1차 캐시) member 엔티티를 조회해온 것이다.
    * .jar 파일로 실행
        User/IdeaProject/jpashop 이동 -> ./gradlew.bat clean build -> java -jar jar파일

3. 엔티티 클래스 개발
    - @Embeddable : 해당 클래스가 jpa의 내장타입이라는 것을 선언 / @Embedded : 해당 타입이 jpa 내장타입이라는 것을 알려줌
    - @OneToMany / @ManyToOne : 일대다 / 다대일 관계
       * 중요 : 해당 관계에서는 관계의 주인이 필요하다 -> fk에 가까이 있는 table이 주인
         다) @JoinColumn(name = "") : fk 선정
         일) @OneToMany(mappedBy = "") : (다)에 들어간 매핑명
    - @Enumerated(EnumType.ORDINAL / EnumType.STRING)
       EnumType.ORDINAL : default값, index로 Enum값 추출 -> enumType 이 추가되어 순서가 변경되면 오류가 발생할 수 있음.
       EnumType.STRING : 순서와 상관없이 호출 -> EnumType 명을 호출.

  # 엔티티 설계시 주의점
    1. 엔티티에는 가급적 Setter를 사용하지 말자.
       변경 포인트가 많아지면 유지보수가 어려워진다.

    ** 2. 모든 연관관계는 지연로딩으로 설정!!! : 매우 중요
       지연로딩(LAZY)로 설정해야한다.
       즉시로딩(EAGER) : JPQL을 실행할 때 N+1문제가 발생한다.
       @xToOne(ManyToOne, ManyToMany) : fetch전략이 EAGER -> 반드시 LAZY로 변경.

    3. 컬렉션은 필드에서 바로 초기화 하자.
       하이버네이트는 엔티티를 영속화할 때, 컬렉션을 감싸서 하이버네이트 제공하는 내장 컬렉션으로 변경한다.

    4. casecade = CasecadeType.ALL
       jpa의 기본 : 넣고 싶은 값은 무조건 persist 해주어야한다.
       위 옵션을 사용하면 A객체를 persist하면 B도 같이 자동으로 persist되어진다.